{
	"info": {
		"_postman_id": "0a49ad30-16d5-4e81-9feb-303299f9c573",
		"name": "33_Postman_HM_3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23857345"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var jsonData = pm.response.json(); \r",
							"var resp_token = jsonData.token;\r",
							"console.log(resp_token)\r",
							"pm.environment.set(\"token\", resp_token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Tina",
							"type": "text"
						},
						{
							"key": "password",
							"value": "ytrewq671",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info Raw_JSON",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// Проверка структуры json в ответе\r",
							"const schema  = {\r",
							"    \"type\" : \"object\",\r",
							"    \"properties\" : { \r",
							"\r",
							"  \"person\" : {\r",
							"    \"type\": \"object\",\r",
							"\r",
							"  \"properties\": {\r",
							"       \r",
							"        \"u_age\": {\r",
							"        \"type\": \"integer\"\r",
							"        },\r",
							"\r",
							"         \"u_name\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\" : [\r",
							"              {\r",
							"                  \"type\" : \"string\"\r",
							"              },\r",
							"\r",
							"              {\r",
							"                   \"type\" : \"integer\"\r",
							"              },\r",
							"\r",
							"              {\r",
							"                   \"type\" : \"integer\"\r",
							"              }\r",
							"          ]\r",
							"     },\r",
							"            \"u_salary_1_5_year\": {\r",
							"            \"type\": \"integer\"\r",
							"        }\r",
							"        \r",
							"    },\r",
							"\r",
							"    \"required\" : [\r",
							"        \"u_age\",\r",
							"        \"u_name\",\r",
							"        \"u_salary_1_5_year\"\r",
							"    ]\r",
							"   },    \r",
							"\r",
							"    \"qa_salary_after_12_months\" : {\r",
							"            \"type\" : \"number\"\r",
							"        },\r",
							"        \r",
							"        \"qa_salary_after_6_months\" : {\r",
							"            \"type\" : \"integer\"\r",
							"        },\r",
							"        \"start_qa_salary\" : {\r",
							"            \"type\" : \"integer\"\r",
							"        }      \r",
							"  },\r",
							"\r",
							"  \"required\" : [\r",
							"      \"person\",\r",
							"      \"qa_salary_after_12_months\",\r",
							"      \"qa_salary_after_6_months\",\r",
							"       \"start_qa_salary\"\r",
							"  ]\r",
							"       \r",
							" };\r",
							"\r",
							" pm.test (\"Validating schema \", () => {\r",
							"     pm.response.to.have.jsonSchema(schema);\r",
							" });\r",
							"\r",
							"// В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент\r",
							"var resp_json = pm.response.json();\r",
							"var req_raw_json = JSON.parse(pm.request.body.raw);\r",
							"\r",
							"// В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"var req_raw_json_salary = +req_raw_json.salary;\r",
							"var resp_json_u_salary_1_5_year = resp_json.person.u_salary_1_5_year;\r",
							"console.log(resp_json_u_salary_1_5_year);\r",
							"\r",
							" pm.test (\"Validating response u_salary_1_5_year= Request salary*4 \", () => {\r",
							"     pm.expect(resp_json_u_salary_1_5_year).to.equal(req_raw_json_salary*4);\r",
							" });\r",
							"\r",
							" pm.test (\"Validating response qa_salary_after_12_months = Request salary*2.9\", () => {\r",
							"     pm.expect(resp_json.qa_salary_after_12_months).to.equal(req_raw_json_salary*2.9);\r",
							" });\r",
							"\r",
							"  pm.test (\"Validating response qa_salary_after_6_months = Request salary*2 \", () => {\r",
							"     pm.expect(resp_json.qa_salary_after_6_months).to.equal(req_raw_json_salary*2);\r",
							" });\r",
							"\r",
							" // Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"\r",
							"pm.environment.set(\"u_salary_1.5_year\", resp_json_u_salary_1_5_year);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\": 19,\r\n     \"salary\": 1000,\r\n     \"name\" : \"Valya\",\r\n     \"auth_token\" : \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					],
					"query": [
						{
							"key": "user_name",
							"value": "Alex",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data Tests",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"const schema = {\r",
							"\"type\" : \"object\",\r",
							"\"properties\" : {\r",
							"\"age\" : {\r",
							"    \"type\" : \"integer\"\r",
							"},\r",
							"\"name\" : {\r",
							"    \"type\" : \"string\"\r",
							"},\r",
							"\"salary\" : {\r",
							"    \"type\" : \"array\",\r",
							"    \"items\": [\r",
							"        {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"},\r",
							"\"required\" : [\r",
							"    \"age\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"]\r",
							"};\r",
							"\r",
							" pm.test(\"Validating schema\", function () {\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							" });\r",
							"\r",
							"// В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"var req = request.data;\r",
							"\r",
							"pm.test(\"Response request salary*2 check\", function () {\r",
							"    pm.expect(+jsonData.salary[1]).to.eql(req.salary*2); // expect функція яка порівнює два значення\r",
							" });\r",
							"\r",
							" pm.test(\"Response request salary*3 check\", function () {\r",
							"    pm.expect(+jsonData.salary[2]).to.eql(req.salary*3); // expect функція яка порівнює два значення\r",
							" });\r",
							" // проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							" pm.test(\"Check if the third element of the array is greater than the first two elements \", function () {\r",
							"     pm.expect(+jsonData.salary[2]).to.be.above(+jsonData.salary[0]);\r",
							"     pm.expect(+jsonData.salary[2]).to.be.above(+jsonData.salary[1]);\r",
							" });\r",
							"  \r",
							"\r",
							"  "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Tina",
							"type": "text"
						},
						{
							"key": "age",
							"value": "19",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info_tests",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Проверка структуры json в ответе\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"age\": {\r",
							"            \"type\" : \"integer\"\r",
							"        },\r",
							"         \"daily_food\" : {\r",
							"             \"type\" : \"number\"\r",
							"         },\r",
							"         \"daily_sleep\": {\r",
							"             \"type\" : \"number\"\r",
							"         },\r",
							"         \"name\" : {\r",
							"             \"type\": \"string\"\r",
							"         }\r",
							"        \r",
							"    },\r",
							"    \"required\": [\r",
							"    \"age\",\r",
							"    \"name\",\r",
							"   \"daily_food\",\r",
							"    \"daily_sleep\"\r",
							"    ]\r",
							"};\r",
							"\r",
							"pm.test(\"Validating schema\", ()=> {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"var json_resp = pm.response.json();\r",
							"var req_data = request.data;\r",
							"var weight_req_daily_food = req_data.weight*0.012;\r",
							"var weight_req_daily_sleep = req_data.weight*2.5;\r",
							"pm.test(\"Request response weight_req_daily_food calculation check\",\r",
							"function() {\r",
							"   pm.expect(json_resp.daily_food).to.equal(weight_req_daily_food);\r",
							"}\r",
							");\r",
							"\r",
							"pm.test(\"Request response weight_req_daily_sleep calculation check\",\r",
							"function() {\r",
							"   pm.expect(json_resp.daily_sleep).to.equal(weight_req_daily_sleep);\r",
							"}\r",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "19",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "77",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Valya",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user_tests",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema= { \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"children\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"family\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test(\"Validating schema\", ()=> {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"// Проверить что значение поля salary = значению переменной u_salary_1.5_year из окружения\r",
							"let u_salary_1_5_year = pm.environment.get(\"u_salary_1.5_year\");\r",
							"console.log(u_salary_1_5_year);\r",
							"var req_s = request.data.salary;\r",
							"console.log(req_s);\r",
							"\r",
							"pm.test(\"Request response salary check\",\r",
							"function() {\r",
							"    pm.expect(+req_s).to.equal(u_salary_1_5_year);\r",
							"}\r",
							");\r",
							"\r",
							"var req = request.data;\r",
							"var resp_json = pm.response.json();\r",
							"\r",
							"//  Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"\r",
							"pm.test(\"Request response age check\",\r",
							"function() {\r",
							"    pm.expect(resp_json.age).to.equal(req.age);\r",
							"}\r",
							");\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "24",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{u_salary_1.5_year}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Igor",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency_tests",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Можете взять любой объект из присланного списка, используйте js random.\r",
							"// В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
							"var resp_json = pm.response.json();\r",
							"var len_resp = resp_json.length;\r",
							"console.log(len_resp-1);\r",
							"\r",
							"function getRandomElement(arr) {\r",
							"  var random_index = Math.floor(Math.random() * arr.length); \r",
							"   return arr[random_index];\r",
							"\r",
							"}\r",
							"  var random_object = getRandomElement(resp_json);\r",
							"    // console.log(random_object.Cur_ID);\r",
							"   \r",
							"var obj_index = random_object.Cur_ID;\r",
							"console.log(obj_index);\r",
							"pm.environment.set(\"curr_ID\", obj_index);\r",
							" "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://54.157.99.22:80/currency",
					"protocol": "http",
					"host": [
						"54",
						"157",
						"99",
						"22"
					],
					"port": "80",
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "curr_byn_tests",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const schema = { \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"Cur_Abbreviation\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_ID\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Cur_Name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_OfficialRate\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"Cur_Scale\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Date\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"Cur_Abbreviation\",\r",
							"    \"Cur_ID\",\r",
							"    \"Cur_Name\",\r",
							"    \"Cur_OfficialRate\",\r",
							"    \"Cur_Scale\",\r",
							"    \"Date\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test(\"Validating schema\", ()=> {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{curr_ID}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://54.157.99.22:80/curr_byn",
					"protocol": "http",
					"host": [
						"54",
						"157",
						"99",
						"22"
					],
					"port": "80",
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		}
	]
}